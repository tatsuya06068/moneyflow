{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst bopsAdapter = createEntityAdapter({\n  selectId: bopListType => bopListType.id\n}); //BoPList取得\n\nconst GetBoPList = async accessToken => {\n  console.log(accessToken);\n  return axios.get(\"http://localhost:3000/balance_of_payments\", {\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  });\n}; //BoP登録\n\n\n_c = GetBoPList;\n\nconst InsBoP = async (accessToken, title, date, totalMoney) => {\n  return await axios.post(\"http://localhost:3000/balance_of_payments\", {\n    balanceofpayment: {\n      title: title,\n      date: date,\n      totalmoney: totalMoney\n    }\n  }, {\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  });\n};\n\n_c2 = InsBoP;\nexport const ResponseBoPIns = createAsyncThunk('balanceOfPayment/boPIns', async ({\n  accessToken,\n  title,\n  date,\n  totalMoney\n}) => {\n  return await InsBoP(accessToken, title, date, totalMoney).then(res => {\n    console.log(res);\n    return res;\n  }).catch(err => {\n    console.log(Promise.resolve(err));\n    return err;\n  });\n}); //BoP一覧取得   \n\nexport const ResponseBoPList = createAsyncThunk('balanceOfPayment/boPList', async ({\n  accessToken\n}) => {\n  return GetBoPList(accessToken).then(res => {\n    console.log(res);\n    return {\n      balanceOfPayment: res\n    };\n  }).catch(err => {\n    console.log(Promise.resolve(err));\n    return err;\n  });\n});\nexport const BoPSlice = createSlice({\n  name: 'balanceOfPayment',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(ResponseBoPList.fulfilled, (state, action) => {\n      state.BoPItems = action.payload.BoPItems;\n    }).addCase(ResponseBoPIns.fulfilled, (state, action) => {\n      state.BoPItems = action.payload.BoPItems;\n    });\n  }\n});\nexport const {} = BoPSlice.actions;\nexport default BoPSlice;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetBoPList\");\n$RefreshReg$(_c2, \"InsBoP\");","map":{"version":3,"sources":["/moneyflow/src/stores/slices/BoPSlice.ts"],"names":["createSlice","createAsyncThunk","createEntityAdapter","axios","bopsAdapter","selectId","bopListType","id","GetBoPList","accessToken","console","log","get","headers","Authorization","InsBoP","title","date","totalMoney","post","balanceofpayment","totalmoney","ResponseBoPIns","then","res","catch","err","Promise","resolve","ResponseBoPList","balanceOfPayment","BoPSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","BoPItems","payload","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter, PayloadAction } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BoPItem, BoPState } from '../../models/BoPModel'\n\n\n    type bopListType = BoPState\n\n\n\nconst bopsAdapter = createEntityAdapter<bopListType>({\n    selectId: (bopListType) => bopListType.id\n})\n\n//BoPList取得\nconst GetBoPList = async(accessToken: string)=> {\n    console.log(accessToken);\n    return axios.get(\"http://localhost:3000/balance_of_payments\", { headers: {\n        Authorization: \"Bearer \" + accessToken\n        }, \n    })\n}\n//BoP登録\nconst InsBoP = async(accessToken: string, title: string , date: string, totalMoney: string) => {\n        return await axios.post(\"http://localhost:3000/balance_of_payments\", {  \n                balanceofpayment: {\n                    title: title,\n                    date: date,\n                    totalmoney: totalMoney\n                }\n            },\n         {\n            headers: {\n                Authorization: \"Bearer \" + accessToken\n        },\n    })\n} \n\nexport const ResponseBoPIns = createAsyncThunk<bopListType, {accessToken: string, title: string, date: string, totalMoney: string} > (\n    'balanceOfPayment/boPIns',\n    async ({accessToken, title, date, totalMoney},): Promise<bopListType> => {\n      return await InsBoP(accessToken, title, date, totalMoney)\n      .then((res)=>{\n          console.log(res)\n          return res\n      })\n      .catch((err) => {\n          console.log(Promise.resolve(err));\n          return err;\n      });\n    } \n);\n\n//BoP一覧取得   \nexport const ResponseBoPList = createAsyncThunk<bopListType, {accessToken: string} >(\n    'balanceOfPayment/boPList',\n    async ({accessToken},): Promise<bopListType>=> {\n        return GetBoPList(accessToken)\n         .then((res) => {\n             console.log(res)\n            return {balanceOfPayment: res}\n         })\n         .catch((err) => {\n            console.log(Promise.resolve(err));\n            return err;\n         });\n    }\n);\n\nexport const BoPSlice = createSlice({\n    name: 'balanceOfPayment',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(ResponseBoPList.fulfilled, (state, action) => {\n                state.BoPItems = action.payload.BoPItems\n            })\n            .addCase(ResponseBoPIns.fulfilled, (state, action) =>{\n                state.BoPItems = action.payload.BoPItems\n            })\n        \n    }\n    \n});\n\nexport const {\n    \n} = BoPSlice.actions\n\nexport default BoPSlice\n"]},"metadata":{},"sourceType":"module"}