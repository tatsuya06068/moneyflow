{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { useAuth0 } from '@auth0/auth0-react';\nconst initialState = {\n  BoPItems: []\n};\nexport const responsBoP = (type, accesstoken) => {\n  //    token = aaccesstoken;\n  switch (type) {\n    case 1: // BoPList();\n\n  }\n};\n\nasync function BoPLista() {\n  _s();\n\n  const {\n    getAccessTokenSilently\n  } = useAuth0();\n\n  const GetBoPList = async token => {\n    console.log(await token);\n    return axios.get(\"http://localhost:3000/api/private\", {\n      headers: {\n        Authorization: \"Bearer \" + (await token)\n      }\n    });\n  };\n} //BoP一覧取得   \n\n\n_s(BoPLista, \"G9ibZW7eK60LScspWdqw92lZMvw=\", false, function () {\n  return [useAuth0];\n});\n\n_c = BoPLista;\nexport const BoPList = createAsyncThunk('balanceOfPayment/boPList', async ({\n  accessToken\n}) => {\n  return GetBoPList({\n    accessToken\n  }).then(res => {\n    return {\n      balanceOfPayment: res\n    };\n  }).catch(err => {\n    console.log(err);\n    return err;\n  });\n});\nexport const BoPSlice = createSlice({\n  name: 'balanceOfPayment',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(BoPList.fulfilled, (state, action) => {\n      state.BoPItems = action.payload.BoPItems;\n    });\n  }\n});\nexport const {} = BoPSlice.actions;\nexport default BoPSlice;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoPLista\");","map":{"version":3,"sources":["/moneyflow/src/stores/slices/BoPSlice.ts"],"names":["createSlice","createAsyncThunk","axios","useAuth0","initialState","BoPItems","responsBoP","type","accesstoken","BoPLista","getAccessTokenSilently","GetBoPList","token","console","log","get","headers","Authorization","BoPList","accessToken","then","res","balanceOfPayment","catch","err","BoPSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","actions"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAAkE,kBAAlE;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAASC,QAAT,QAAyB,oBAAzB;AAKI,MAAMC,YAAyB,GAAG;AAC9BC,EAAAA,QAAQ,EAAE;AADoB,CAAlC;AAIJ,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAeC,WAAf,KAAmC;AAC7D;AACI,UAAQD,IAAR;AACI,SAAK,CAAL,CADJ,CAEO;;AAFP;AAKH,CAPM;;AAQP,eAAeE,QAAf,GAAyB;AAAA;;AACrB,QAAM;AAACC,IAAAA;AAAD,MAA4BP,QAAQ,EAA1C;;AACA,QAAMQ,UAAU,GAAG,MAAMC,KAAN,IAAqB;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAMF,KAAlB;AACA,WAAOV,KAAK,CAACa,GAAN,CAAU,mCAAV,EAA+C;AAAEC,MAAAA,OAAO,EAAE;AACjEC,QAAAA,aAAa,EAAE,aAAY,MAAML,KAAlB;AADkD;AAAX,KAA/C,CAAP;AAIP,GANG;AAOH,C,CAED;;;GAXeH,Q;UACuBN,Q;;;KADvBM,Q;AAYf,OAAO,MAAMS,OAAO,GAAGjB,gBAAgB,CACnC,0BADmC,EAEnC,OAAO;AAACkB,EAAAA;AAAD,CAAP,KAA+C;AAC3C,SAAOR,UAAU,CAAC;AAACQ,IAAAA;AAAD,GAAD,CAAV,CACLC,IADK,CACCC,GAAD,IAAS;AACZ,WAAO;AAACC,MAAAA,gBAAgB,EAAED;AAAnB,KAAP;AACF,GAHK,EAILE,KAJK,CAIEC,GAAD,IAAS;AACbX,IAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACA,WAAOA,GAAP;AACF,GAPK,CAAP;AASH,CAZkC,CAAhC;AAeP,OAAO,MAAMC,QAAQ,GAAGzB,WAAW,CAAC;AAChC0B,EAAAA,IAAI,EAAE,kBAD0B;AAEhCtB,EAAAA,YAFgC;AAGhCuB,EAAAA,QAAQ,EAAE,EAHsB;AAIhCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,OAAO,CAACa,SAAxB,EAAmC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAAC3B,QAAN,GAAiB4B,MAAM,CAACC,OAAP,CAAe7B,QAAhC;AACC,KAFL;AAGH;AAR+B,CAAD,CAA5B;AAWP,OAAO,MAAM,KAEToB,QAAQ,CAACU,OAFN;AAIP,eAAeV,QAAf","sourcesContent":["import { createSlice, createAsyncThunk, bindActionCreators } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios'\nimport { BoPState } from '../../models/BoPModel'\nimport useGetToken from '../../common/useGetToken'\nimport { useAuth0 } from '@auth0/auth0-react' \nimport { promises } from 'dns'\n    //let token: any;\n    type bopListType = BoPState\n\n    const initialState: bopListType = {\n        BoPItems: [],\n    };\n\nexport const responsBoP = (type: number, accesstoken: any) =>{\n//    token = aaccesstoken;\n    switch (type){\n        case 1:\n           // BoPList();\n    }\n\n}\nasync function BoPLista(){ \n    const {getAccessTokenSilently} =  useAuth0();\n    const GetBoPList = async(token: any) => {\n        console.log(await token);\n        return axios.get(\"http://localhost:3000/api/private\", { headers: {\n        Authorization: \"Bearer \" + await token\n        }, \n    })\n}\n}\n\n//BoP一覧取得   \nexport const BoPList = createAsyncThunk<bopListType, {accessToken: any} >(\n    'balanceOfPayment/boPList',\n    async ({accessToken},): Promise<bopListType>=> {\n        return GetBoPList({accessToken})\n         .then((res) => {\n            return {balanceOfPayment: res}\n         })\n         .catch((err) => {\n            console.log(err);\n            return err;\n         });\n        \n    }\n);\n\nexport const BoPSlice = createSlice({\n    name: 'balanceOfPayment',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(BoPList.fulfilled, (state, action) => {\n            state.BoPItems = action.payload.BoPItems\n            })\n    }\n});\n\nexport const {\n    \n} = BoPSlice.actions\n\nexport default BoPSlice\n"]},"metadata":{},"sourceType":"module"}