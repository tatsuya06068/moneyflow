{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  BoPItems: []\n}; //BoPList取得\n\nconst GetBoPList = async accessToken => {\n  console.log(accessToken);\n  return axios.get(\"http://localhost:3000/balance_of_payments\", {\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  });\n}; //BoP登録\n\n\n_c = GetBoPList;\n\nconst InsBoP = async accessToken => {\n  return axios.post(\"http://localhost:3000/balance_of_payments\", {\n    Headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  });\n};\n\n_c2 = InsBoP;\nexport const ResponseBoPIns = createAsyncThunk('balanceOfPayment/boPIns', async ({\n  accessToken\n}) => {\n  return InsBoP(accessToken).then(res => {\n    return;\n  });\n}); //BoP一覧取得   \n\nexport const ResponseBoPList = createAsyncThunk('balanceOfPayment/boPList', async ({\n  accessToken\n}) => {\n  return GetBoPList(accessToken).then(res => {\n    console.log(res);\n    return {\n      balanceOfPayment: res\n    };\n  }).catch(err => {\n    console.log(Promise.resolve(err));\n    return err;\n  });\n});\nexport const BoPSlice = createSlice({\n  name: 'balanceOfPayment',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(ResponseBoPList.fulfilled, (state, action) => {\n      state.BoPItems = action.payload.BoPItems;\n    });\n  }\n});\nexport const {} = BoPSlice.actions;\nexport default BoPSlice;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetBoPList\");\n$RefreshReg$(_c2, \"InsBoP\");","map":{"version":3,"sources":["/moneyflow/src/stores/slices/BoPSlice.ts"],"names":["createSlice","createAsyncThunk","axios","initialState","BoPItems","GetBoPList","accessToken","console","log","get","headers","Authorization","InsBoP","post","Headers","ResponseBoPIns","then","res","ResponseBoPList","balanceOfPayment","catch","err","Promise","resolve","BoPSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAAkE,kBAAlE;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAOI,MAAMC,YAAyB,GAAG;AAC9BC,EAAAA,QAAQ,EAAE;AADoB,CAAlC,C,CAIJ;;AACA,MAAMC,UAAU,GAAG,MAAMC,WAAN,IAA6B;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACA,SAAOJ,KAAK,CAACO,GAAN,CAAU,2CAAV,EAAuD;AAAEC,IAAAA,OAAO,EAAE;AACrEC,MAAAA,aAAa,EAAE,YAAYL;AAD0C;AAAX,GAAvD,CAAP;AAIH,CAND,C,CAOA;;;KAPMD,U;;AAQN,MAAMO,MAAM,GAAG,MAAMN,WAAN,IAA8B;AACzC,SAAOJ,KAAK,CAACW,IAAN,CAAW,2CAAX,EAAwD;AAAEC,IAAAA,OAAO,EAAE;AACtEH,MAAAA,aAAa,EAAE,YAAYL;AAD2C;AAAX,GAAxD,CAAP;AAIH,CALD;;MAAMM,M;AAON,OAAO,MAAMG,cAAc,GAAGd,gBAAgB,CAC1C,yBAD0C,EAE1C,OAAO;AAACK,EAAAA;AAAD,CAAP,KAAgD;AAC9C,SAAOM,MAAM,CAACN,WAAD,CAAN,CACNU,IADM,CACAC,GAAD,IAAO;AACT;AACH,GAHM,CAAP;AAKD,CARyC,CAAvC,C,CAWP;;AACA,OAAO,MAAMC,eAAe,GAAGjB,gBAAgB,CAC3C,0BAD2C,EAE3C,OAAO;AAACK,EAAAA;AAAD,CAAP,KAA+C;AAC3C,SAAOD,UAAU,CAACC,WAAD,CAAV,CACLU,IADK,CACCC,GAAD,IAAS;AACXV,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACD,WAAO;AAACE,MAAAA,gBAAgB,EAAEF;AAAnB,KAAP;AACF,GAJK,EAKLG,KALK,CAKEC,GAAD,IAAS;AACbd,IAAAA,OAAO,CAACC,GAAR,CAAYc,OAAO,CAACC,OAAR,CAAgBF,GAAhB,CAAZ;AACA,WAAOA,GAAP;AACF,GARK,CAAP;AAUH,CAb0C,CAAxC;AAgBP,OAAO,MAAMG,QAAQ,GAAGxB,WAAW,CAAC;AAChCyB,EAAAA,IAAI,EAAE,kBAD0B;AAEhCtB,EAAAA,YAFgC;AAGhCuB,EAAAA,QAAQ,EAAE,EAHsB;AAIhCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBX,eAAe,CAACY,SAAhC,EAA2C,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1DD,MAAAA,KAAK,CAAC3B,QAAN,GAAiB4B,MAAM,CAACC,OAAP,CAAe7B,QAAhC;AACC,KAFL;AAGH;AAR+B,CAAD,CAA5B;AAWP,OAAO,MAAM,KAEToB,QAAQ,CAACU,OAFN;AAIP,eAAeV,QAAf","sourcesContent":["import { createSlice, createAsyncThunk, bindActionCreators } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios'\nimport { BoPState } from '../../models/BoPModel'\nimport useGetToken from '../../common/useGetToken'\nimport { useAuth0 } from '@auth0/auth0-react' \nimport { promises } from 'dns'\n    type bopListType = BoPState\n\n    const initialState: bopListType = {\n        BoPItems: [],\n    };\n\n//BoPList取得\nconst GetBoPList = async(accessToken: string)=> {\n    console.log(accessToken);\n    return axios.get(\"http://localhost:3000/balance_of_payments\", { headers: {\n        Authorization: \"Bearer \" + accessToken\n        }, \n    })\n}\n//BoP登録\nconst InsBoP = async(accessToken: string) => {\n    return axios.post(\"http://localhost:3000/balance_of_payments\", { Headers: {\n        Authorization: \"Bearer \" + accessToken\n        },\n    })\n} \n\nexport const ResponseBoPIns = createAsyncThunk<bopListType, {accessToken: string} > (\n    'balanceOfPayment/boPIns',\n    async ({accessToken},): Promise<bopListType> => {\n      return InsBoP(accessToken)\n      .then((res)=>{\n          return\n      })\n\n    } \n    )\n\n//BoP一覧取得   \nexport const ResponseBoPList = createAsyncThunk<bopListType, {accessToken: string} >(\n    'balanceOfPayment/boPList',\n    async ({accessToken},): Promise<bopListType>=> {\n        return GetBoPList(accessToken)\n         .then((res) => {\n             console.log(res)\n            return {balanceOfPayment: res}\n         })\n         .catch((err) => {\n            console.log(Promise.resolve(err));\n            return err;\n         });\n        \n    }\n);\n\nexport const BoPSlice = createSlice({\n    name: 'balanceOfPayment',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(ResponseBoPList.fulfilled, (state, action) => {\n            state.BoPItems = action.payload.BoPItems\n            })\n    }\n});\n\nexport const {\n    \n} = BoPSlice.actions\n\nexport default BoPSlice\n"]},"metadata":{},"sourceType":"module"}