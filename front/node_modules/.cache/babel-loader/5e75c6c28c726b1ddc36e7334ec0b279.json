{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst bopsAdapter = createEntityAdapter({\n  selectId: BoPItem => BoPItem.id\n});\nconst URL = 'http://localhost:3000'; //BoPList取得\n\nconst GetBoPList = async accessToken => {\n  console.log(accessToken);\n  return axios.get(URL + '/balance_of_payments', {\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  });\n}; //BoP登録\n\n\n_c = GetBoPList;\n\nconst InsBoP = async (accessToken, title, date, totalMoney) => {\n  return await axios.post(URL + '/balance_of_payments', {\n    balanceofpayment: {\n      title: title,\n      date: date,\n      totalmoney: totalMoney\n    }\n  }, {\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  });\n};\n\n_c2 = InsBoP;\nexport const ResponseBoPIns = createAsyncThunk('balanceOfPayment/boPIns', async ({\n  accessToken,\n  title,\n  date,\n  totalMoney\n}) => {\n  return await InsBoP(accessToken, title, date, totalMoney).then(res => {\n    console.log(res);\n    return res;\n  }).catch(err => {\n    console.log(Promise.resolve(err));\n    return err;\n  });\n}); //BoP一覧取得   \n\nexport const ResponseBoPList = createAsyncThunk('balanceOfPayment/boPList', async ({\n  accessToken\n}, thunkApi) => {\n  const response = await GetBoPList(accessToken).catch(err => {\n    thunkApi.rejectWithValue(err);\n    console.log(Promise.resolve(err));\n    throw err;\n  });\n  return response.data;\n});\nexport const BoPSlice = createSlice({\n  name: 'balanceOfPayment',\n  initialState: bopsAdapter.getInitialState({\n    loading: 'idle'\n  }),\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(ResponseBoPList.fulfilled, (state, action) => {\n      bopsAdapter.setAll(state, action.payload);\n    }).addCase(ResponseBoPIns.fulfilled, (state, action) => {\n      bopsAdapter.addOne(state, action.payload);\n    });\n  }\n});\nexport const {} = BoPSlice.actions;\nexport default BoPSlice;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetBoPList\");\n$RefreshReg$(_c2, \"InsBoP\");","map":{"version":3,"sources":["/moneyflow/src/stores/slices/BoPSlice.ts"],"names":["createSlice","createAsyncThunk","createEntityAdapter","axios","bopsAdapter","selectId","BoPItem","id","URL","GetBoPList","accessToken","console","log","get","headers","Authorization","InsBoP","title","date","totalMoney","post","balanceofpayment","totalmoney","ResponseBoPIns","then","res","catch","err","Promise","resolve","ResponseBoPList","thunkApi","response","rejectWithValue","data","BoPSlice","name","initialState","getInitialState","loading","reducers","extraReducers","builder","addCase","fulfilled","state","action","setAll","payload","addOne","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter, PayloadAction } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BoPItem, BoPState } from '../../models/BoPModel'\n\n\nexport type bopListType = {bops: BoPState}\n\n\nconst bopsAdapter = createEntityAdapter<BoPItem>({\n    selectId: (BoPItem) => BoPItem.id\n})\n\nconst URL = 'http://localhost:3000'\n//BoPList取得\nconst GetBoPList = async(accessToken: string)=> {\n    console.log(accessToken);\n    return axios.get<BoPState>( URL + '/balance_of_payments', { headers: {\n        Authorization: \"Bearer \" + accessToken\n        }, \n    })\n}\n//BoP登録\nconst InsBoP = async(accessToken: string, title: string , date: string, totalMoney: string) => {\n        return await axios.post( URL + '/balance_of_payments', {  \n                balanceofpayment: {\n                    title: title,\n                    date: date,\n                    totalmoney: totalMoney\n                }\n            },\n         {\n            headers: {\n                Authorization: \"Bearer \" + accessToken\n        },\n    })\n} \n\nexport const ResponseBoPIns = createAsyncThunk<bopListType, {accessToken: string, title: string, date: string, totalMoney: string} > (\n    'balanceOfPayment/boPIns',\n    async ({accessToken, title, date, totalMoney},): Promise<bopListType> => {\n      return await InsBoP(accessToken, title, date, totalMoney)\n      .then((res)=>{\n          console.log(res)\n          return res\n      })\n      .catch((err) => {\n          console.log(Promise.resolve(err));\n          return err;\n      });\n    } \n);\n\n//BoP一覧取得   \nexport const ResponseBoPList = createAsyncThunk<bopListType, {accessToken: string} >(\n    'balanceOfPayment/boPList',\n    async ({accessToken}, thunkApi): Promise<bopListType>=> {\n        const response = await GetBoPList(accessToken)\n         .catch((err) => {\n            thunkApi.rejectWithValue(err); \n            console.log(Promise.resolve(err));\n            throw err;\n         });\n         return response.data\n    }\n);\n\nexport const BoPSlice = createSlice({\n    name: 'balanceOfPayment',\n    initialState: bopsAdapter.getInitialState({\n        loading: 'idle'\n    }),\n    reducers: {},\n    extraReducers: (builder) => {\n        builder \n            .addCase(ResponseBoPList.fulfilled, (state, action) => {\n                bopsAdapter.setAll(state, action.payload);\n            })\n            .addCase(ResponseBoPIns.fulfilled, (state, action) =>{\n                bopsAdapter.addOne(state, action.payload);\n            })\n        \n    }\n    \n});\n\nexport const {\n    \n} = BoPSlice.actions\n\nexport default BoPSlice\n"]},"metadata":{},"sourceType":"module"}