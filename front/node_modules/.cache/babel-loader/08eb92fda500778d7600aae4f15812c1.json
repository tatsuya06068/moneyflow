{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nlet token;\nconst initialState = {\n  BoPItems: []\n};\nexport const responsBoP = (type, accesstoken) => {\n  token = accesstoken;\n\n  switch (type) {\n    case 1: // BoPList();\n\n  }\n};\n\nconst GetBoPList = async () => {\n  console.log(token);\n  return axios.get(\"http://localhost:3000/api/private\", {\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  });\n}; //BoP一覧取得   \n\n\n_c = GetBoPList;\nexport const BoPList = createAsyncThunk('balanceOfPayment/boPList', async () => {\n  return GetBoPList().then(res => {\n    return {\n      balanceOfPayment: res\n    };\n  }).catch(err => {\n    console.log(err);\n    return err;\n  });\n});\nexport const BoPSlice = createSlice({\n  name: 'balanceOfPayment',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(BoPList.fulfilled, (state, action) => {\n      state.BoPItems = action.payload.BoPItems;\n    });\n  }\n});\nexport const {} = BoPSlice.actions;\nexport default BoPSlice;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetBoPList\");","map":{"version":3,"sources":["/moneyflow/src/stores/slices/BoPSlice.ts"],"names":["createSlice","createAsyncThunk","axios","token","initialState","BoPItems","responsBoP","type","accesstoken","GetBoPList","console","log","get","headers","Authorization","BoPList","then","res","balanceOfPayment","catch","err","BoPSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAAkE,kBAAlE;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAKI,IAAIC,KAAJ;AAGA,MAAMC,YAAyB,GAAG;AAC9BC,EAAAA,QAAQ,EAAE;AADoB,CAAlC;AAIJ,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAeC,WAAf,KAAmC;AACzDL,EAAAA,KAAK,GAAGK,WAAR;;AACA,UAAQD,IAAR;AACI,SAAK,CAAL,CADJ,CAEO;;AAFP;AAKH,CAPM;;AASP,MAAME,UAAU,GAAG,YAAW;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA,SAAOD,KAAK,CAACU,GAAN,CAAU,mCAAV,EAA+C;AAAEC,IAAAA,OAAO,EAAE;AAC7DC,MAAAA,aAAa,EAAE,YAAYX;AADkC;AAAX,GAA/C,CAAP;AAIH,CAND,C,CAQA;;;KARMM,U;AASN,OAAO,MAAMM,OAAO,GAAGd,gBAAgB,CACnC,0BADmC,EAEnC,YAAiC;AAC7B,SAAOQ,UAAU,GACfO,IADK,CACCC,GAAD,IAAS;AACZ,WAAO;AAACC,MAAAA,gBAAgB,EAAED;AAAnB,KAAP;AACF,GAHK,EAILE,KAJK,CAIEC,GAAD,IAAS;AACbV,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACA,WAAOA,GAAP;AACF,GAPK,CAAP;AASH,CAZkC,CAAhC;AAeP,OAAO,MAAMC,QAAQ,GAAGrB,WAAW,CAAC;AAChCsB,EAAAA,IAAI,EAAE,kBAD0B;AAEhClB,EAAAA,YAFgC;AAGhCmB,EAAAA,QAAQ,EAAE,EAHsB;AAIhCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBX,OAAO,CAACY,SAAxB,EAAmC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACvB,QAAN,GAAiBwB,MAAM,CAACC,OAAP,CAAezB,QAAhC;AACC,KAFL;AAGH;AAR+B,CAAD,CAA5B;AAWP,OAAO,MAAM,KAETgB,QAAQ,CAACU,OAFN;AAIP,eAAeV,QAAf","sourcesContent":["import { createSlice, createAsyncThunk, bindActionCreators } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios'\nimport { BoPState } from '../../models/BoPModel'\nimport useGetToken from '../../common/useGetToken'\nimport { useAuth0 } from '@auth0/auth0-react' \nimport { promises } from 'dns'\n    let token: any;\n    type bopListType = BoPState\n\n    const initialState: bopListType = {\n        BoPItems: [],\n    };\n\nexport const responsBoP = (type: number, accesstoken: any) =>{\n    token = accesstoken;\n    switch (type){\n        case 1:\n           // BoPList();\n    }\n\n}\n\nconst GetBoPList = async() => {\n    console.log(token);\n    return axios.get(\"http://localhost:3000/api/private\", { headers: {\n        Authorization: \"Bearer \" + token\n        }, \n    })\n}\n\n//BoP一覧取得   \nexport const BoPList = createAsyncThunk<bopListType, {a} >(\n    'balanceOfPayment/boPList',\n    async (): Promise<bopListType>=> {\n        return GetBoPList()\n         .then((res) => {\n            return {balanceOfPayment: res}\n         })\n         .catch((err) => {\n            console.log(err);\n            return err;\n         });\n        \n    }\n);\n\nexport const BoPSlice = createSlice({\n    name: 'balanceOfPayment',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(BoPList.fulfilled, (state, action) => {\n            state.BoPItems = action.payload.BoPItems\n            })\n    }\n});\n\nexport const {\n    \n} = BoPSlice.actions\n\nexport default BoPSlice\n"]},"metadata":{},"sourceType":"module"}