{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  BoPItems: []\n}; //BoPList取得\n\nconst GetBoPList = async accessToken => {\n  console.log(accessToken);\n  return axios.get(\"http://localhost:3000/balance_of_payments\", {\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  });\n}; //BoP登録\n\n\n_c = GetBoPList;\n\nconst InsBoP = async accessToken => {\n  return axios.post(\"http://localhost:3000/balance_of_payments?\" + window.location.search, {\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  });\n};\n\n_c2 = InsBoP;\nexport const ResponseBoPIns = createAsyncThunk('balanceOfPayment/boPIns', async ({\n  accessToken\n}) => {\n  return InsBoP(accessToken).then(res => {\n    return res;\n  }).catch(err => {\n    console.log(err);\n    return err;\n  });\n}); //BoP一覧取得   \n\nexport const ResponseBoPList = createAsyncThunk('balanceOfPayment/boPList', async ({\n  accessToken\n}) => {\n  return GetBoPList(accessToken).then(res => {\n    console.log(res);\n    return {\n      balanceOfPayment: res\n    };\n  }).catch(err => {\n    console.log(Promise.resolve(err));\n    return err;\n  });\n});\nexport const BoPSlice = createSlice({\n  name: 'balanceOfPayment',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(ResponseBoPList.fulfilled, (state, action) => {\n      state.BoPItems = action.payload.BoPItems;\n    }).addCase(ResponseBoPIns.fulfilled, (state, action) => {\n      state.BoPItems = action.payload.BoPItems;\n    });\n  }\n});\nexport const {} = BoPSlice.actions;\nexport default BoPSlice;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetBoPList\");\n$RefreshReg$(_c2, \"InsBoP\");","map":{"version":3,"sources":["/moneyflow/src/stores/slices/BoPSlice.ts"],"names":["createSlice","createAsyncThunk","axios","initialState","BoPItems","GetBoPList","accessToken","console","log","get","headers","Authorization","InsBoP","post","window","location","search","ResponseBoPIns","then","res","catch","err","ResponseBoPList","balanceOfPayment","Promise","resolve","BoPSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAAkF,kBAAlF;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAMI,MAAMC,YAAyB,GAAG;AAC9BC,EAAAA,QAAQ,EAAE;AADoB,CAAlC,C,CAIJ;;AACA,MAAMC,UAAU,GAAG,MAAMC,WAAN,IAA6B;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACA,SAAOJ,KAAK,CAACO,GAAN,CAAU,2CAAV,EAAuD;AAAEC,IAAAA,OAAO,EAAE;AACrEC,MAAAA,aAAa,EAAE,YAAYL;AAD0C;AAAX,GAAvD,CAAP;AAIH,CAND,C,CAOA;;;KAPMD,U;;AAQN,MAAMO,MAAM,GAAG,MAAMN,WAAN,IAA8B;AACzC,SAAOJ,KAAK,CAACW,IAAN,CAAW,+CAA+CC,MAAM,CAACC,QAAP,CAAgBC,MAA1E,EAAkF;AAAEN,IAAAA,OAAO,EAAE;AAChGC,MAAAA,aAAa,EAAE,YAAYL;AADqE;AAAX,GAAlF,CAAP;AAKH,CAND;;MAAMM,M;AAQN,OAAO,MAAMK,cAAc,GAAGhB,gBAAgB,CAC1C,yBAD0C,EAE1C,OAAO;AAACK,EAAAA;AAAD,CAAP,KAAgD;AAC9C,SAAOM,MAAM,CAACN,WAAD,CAAN,CACNY,IADM,CACAC,GAAD,IAAO;AACT,WAAOA,GAAP;AACH,GAHM,EAINC,KAJM,CAICC,GAAD,IAAS;AACZd,IAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACA,WAAOA,GAAP;AACH,GAPM,CAAP;AAQD,CAXyC,CAAvC,C,CAcP;;AACA,OAAO,MAAMC,eAAe,GAAGrB,gBAAgB,CAC3C,0BAD2C,EAE3C,OAAO;AAACK,EAAAA;AAAD,CAAP,KAA+C;AAC3C,SAAOD,UAAU,CAACC,WAAD,CAAV,CACLY,IADK,CACCC,GAAD,IAAS;AACXZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,GAAZ;AACD,WAAO;AAACI,MAAAA,gBAAgB,EAAEJ;AAAnB,KAAP;AACF,GAJK,EAKLC,KALK,CAKEC,GAAD,IAAS;AACbd,IAAAA,OAAO,CAACC,GAAR,CAAYgB,OAAO,CAACC,OAAR,CAAgBJ,GAAhB,CAAZ;AACA,WAAOA,GAAP;AACF,GARK,CAAP;AASH,CAZ0C,CAAxC;AAeP,OAAO,MAAMK,QAAQ,GAAG1B,WAAW,CAAC;AAChC2B,EAAAA,IAAI,EAAE,kBAD0B;AAEhCxB,EAAAA,YAFgC;AAGhCyB,EAAAA,QAAQ,EAAE,EAHsB;AAIhCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACaT,eAAe,CAACU,SAD7B,EACwC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAAC7B,QAAN,GAAiB8B,MAAM,CAACC,OAAP,CAAe/B,QAAhC;AACH,KAHL,EAIK2B,OAJL,CAIad,cAAc,CAACe,SAJ5B,EAIuC,CAACC,KAAD,EAAQC,MAAR,KAAkB;AACjDD,MAAAA,KAAK,CAAC7B,QAAN,GAAiB8B,MAAM,CAACC,OAAP,CAAe/B,QAAhC;AACH,KANL;AAQH;AAb+B,CAAD,CAA5B;AAiBP,OAAO,MAAM,KAETsB,QAAQ,CAACU,OAFN;AAIP,eAAeV,QAAf","sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter, PayloadAction } from '@reduxjs/toolkit'\nimport axios from 'axios'\nimport { BoPState } from '../../models/BoPModel'\n\n\n    type bopListType = BoPState\n\n    const initialState: bopListType = {\n        BoPItems: [],\n    };\n\n//BoPList取得\nconst GetBoPList = async(accessToken: string)=> {\n    console.log(accessToken);\n    return axios.get(\"http://localhost:3000/balance_of_payments\", { headers: {\n        Authorization: \"Bearer \" + accessToken\n        }, \n    })\n}\n//BoP登録\nconst InsBoP = async(accessToken: string) => {\n    return axios.post(\"http://localhost:3000/balance_of_payments?\" + window.location.search, { headers: {\n        Authorization: \"Bearer \" + accessToken\n        },\n        \n    })\n} \n\nexport const ResponseBoPIns = createAsyncThunk<bopListType, {accessToken: string} > (\n    'balanceOfPayment/boPIns',\n    async ({accessToken},): Promise<bopListType> => {\n      return InsBoP(accessToken)\n      .then((res)=>{\n          return res\n      })\n      .catch((err) => {\n          console.log(err)\n          return err;\n      });\n    } \n);\n\n//BoP一覧取得   \nexport const ResponseBoPList = createAsyncThunk<bopListType, {accessToken: string} >(\n    'balanceOfPayment/boPList',\n    async ({accessToken},): Promise<bopListType>=> {\n        return GetBoPList(accessToken)\n         .then((res) => {\n             console.log(res)\n            return {balanceOfPayment: res}\n         })\n         .catch((err) => {\n            console.log(Promise.resolve(err));\n            return err;\n         });\n    }\n);\n\nexport const BoPSlice = createSlice({\n    name: 'balanceOfPayment',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(ResponseBoPList.fulfilled, (state, action) => {\n                state.BoPItems = action.payload.BoPItems\n            })\n            .addCase(ResponseBoPIns.fulfilled, (state, action) =>{\n                state.BoPItems = action.payload.BoPItems\n            })\n        \n    }\n    \n});\n\nexport const {\n    \n} = BoPSlice.actions\n\nexport default BoPSlice\n"]},"metadata":{},"sourceType":"module"}